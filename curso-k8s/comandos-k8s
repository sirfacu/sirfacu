#se crea un contenedor con go para probar si sirve la app que creamos en el main.go

docker run --rm -dti -v $PWD:/go --net host --name golang golang bash

#el dti lo que hace es ponerla a correr en background el -v pues es el volumen
docker build -t k8s-go-app .
docker run -d -p 9091:9090 --name <nombre_contenedor> <imagen>

#eliminar un contendor corriendo
docker rm -fv  <container_id/name>
#cuando son imagenes son locales se usa pull policy ifNotPresent

#para subir la imagen de local al minikube hacer: (YA DEBE APARECER EN DCOKER IMAGES)
minikube image load <NOMBRE_IMAGEN>

#port-forward a pod
kubectl port-forward [POD_NAME] [PUERTO_TU_PC]:[PUERTO_SERVICIO]

#port-forward a servicio
kubectl port-forward service/[SERVICE_NAME] [PUERTO_TU_PC]:[PUERTO_SERVICIO]

#Crear pod de rapidez
kubectl run --rm -ti pod-efimero --image=nginx:alpine -- sh


#namespace
kubectl get namespaces

#revisar todo lo que hay en el namespace
kubectl get all -n kube-public

#crear un pod normal en un namespace
kubectl run pod-efimero --image=<IMAGEN> --namespace <NOMBRE_NAMESPACE>

#Validar el replicaSet
kubectl describe rs <NOMBRE_REPLICA_SET> -n <NOMBRE_NAMESPACE>

#Revisar mensajes de error en el deployment por la quota y otra info
kubectl get deployment.apps limited-test -n limited -o yaml

#Creacion de secretos
#kubectl create secret <TIPO_SECRETO> <NOMBRE_SECRETO> --from-file=<path/secret/file>
kubectl create secret generic example1 --from-file=./secret-files/example1
#obtener el secreto en base64
kubectl get secrets example1 -o yaml
#Decoding el valor
echo "ZGJfcGFzc3dvcmQ9MzJraDRqcjMyMTMxMmpraGc4MzAjJApkYl91c2VyPXVzdWFyaW9fc2VjcmV0bw==" | base64 --decode

#herramienta para sustituir variables de entorno
envsubst < archivo_reemplazar > archivo_sustituido

#nos dice que usuario somos
k8s config current-context

#para validar configuraciones del cluster
k8s config view

#Comando para seterar el cluster 
kubectl config set-cluster sirfacuk8s --server=https://192.168.49.2:8443 --certificate-authority=/ca.crt

#Agregamos credenciales para lordfacu con la llave y certificados creados
kubectl config set-credentials lordfacu --client-certificate=/test/sirfacu.crt  --client-key=/test/sirfacu.key 
#Output: 
#User "lordfacu" set.

#Configuramos el contexto en el cluster NOMBRE_CONFIGURABLE
kubectl config set-context lordfacu --cluster sirfacuk8s --user=lordfacu
#Output: 
#Context "lordfacu" created.

#Configuramos kubectl para que tome las credenciales configuradas de k8s
kubectl config use-context lordfacu
#Output: 
#Switched to context "lordfacu".

#validar que RBAC esta activo
k8s cluster-info dump | grep authorization
# Output:
#"--authorization-mode=Node,RBAC",

# listar nombre para los apiGroups
k8s api-resources

# eliminar contextos creados
# 1. vlaidar cuales hay
#k8s config get-contexts
#CURRENT   NAME             CLUSTER      AUTHINFO       NAMESPACE
#          ci-dev-context   minikube     minikube       ci-dev
#          juanito          juanitok8s   user_juanito   
#          lordfacu         sirfacuk8s   lordfacu       
#          martin           martink8s    user_martin    
#*         minikube         minikube     minikube       default
#          pepito           pepitok8s    user_pepito    
#          user_juanito     sirfacuk8s   user_juanito   
#          user_martin      sirfacuk8s   user_martin    
#          user_pepito      sirfacuk8s   user_pepito    

# 2. Eliminarlos
kubectl config delete-context user_sirfacu-test
kubectl config unset users.NOMBRE_USUARIO

k8s apply -f punto3.yaml --kubeconfig=punto1.yam