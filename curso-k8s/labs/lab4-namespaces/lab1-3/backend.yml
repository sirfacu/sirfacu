apiVersion: apps/v1
kind: Deployment
metadata:
  name: ns-ci-deploy-back
  namespace: ci-dev
  labels:
    app: ci-develop
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ci-develop
  template:
    metadata:
      namespace: ci-dev #los recursos se crearán en este namespace
      labels:
        app: ci-develop
    spec:
      containers:
      - name: backend-lab4-1-3
        #image: k8s-go-app
        image: k8s-go-app:v2 # para iteracion #4 del src/main.go CORS
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80

---
#por defecto el servicio se crea cluster ip
apiVersion: v1
kind: Service
metadata:
  name: backend-lab4-1-3
  namespace: ci-dev #los recursos se crearán en este namespace
  labels:
    app: ci-develop
spec:
  selector:
    app: ci-develop #aqui coloco el mismo de label para que el service busque los pod de ese label
  ports:
  - name: backend-srv
    protocol: TCP
    port: 80 #El puerto con el que escuchara el servicio
    targetPort: 9090 # elpuerto que corre el container

#Lab 4-1-3
# creo un servicio lo despliego en un namespace y vamos a probar desde otro namespace como llamarlo
# se crearon 2 namespaces ci-dev y ci-prod

# creo un pod efimero ns=defautl y luego intento acceder con el nombre del servicio
# kubectl run --rm -ti pod-efimero --image=nginx:alpine -- sh
# instalo curl apk add curl
# trato de consumir el servicio: curl backend-lab4-1-3 y responde
# curl: (6) Could not resolve host: backend-lab4-1-3.ci-dev.srv.cluster.local
# vamos a especificar el DNS
# se crean SERVICE_NAME + NAMESPACE + svc.cluster.local
## ejecuto ahora con la nomenclatura del cluster
 #  curl backend-lab4-1-3.ci-dev.svc.cluster.local
 #  {"time":"2024-08-26T19:26:14.691026563Z","hostname":"ns-ci-deploy-back-5fb6cb6c9d-gn6fq"}/ # 
# y respondió correcto

